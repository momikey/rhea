#ifndef RHEA_AST_NODE_BASE_HPP
#define RHEA_AST_NODE_BASE_HPP

#include "tao/pegtl.hpp"

#include "../parse_tree_node.hpp"

/*
 * The base node for the annotated AST. This is different from
 * the AST skeleton generated by the parser, but it follows the
 * structure of that tree, and each node in the annotated AST
 * will contain an observing pointer to the corresponding node
 * in the generated AST.
 * 
 * Note that this node and its children are *classes* rather than
 * structs. This, IMO, better communicates their status as a
 * polymorphic hierarchy, since the generated AST will store pointers
 * to this base class and access the children through its interface.
 * 
 * Although I haven't decided on code style guidelines for Rhea,
 * I feel that the annotated AST classes should be capitalized. Again,
 * this is for clarity's sake: they're not the same as, e.g., grammar
 * rules.
 */

namespace rhea { namespace ast {
    class ASTNode
    {
        public:
        ASTNode() = default;
        virtual ~ASTNode() {};

        private:
        tao::pegtl::position m_position;
    };
}}

#endif /* RHEA_AST_NODE_BASE_HPP */